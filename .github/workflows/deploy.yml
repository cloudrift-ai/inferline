name: Deploy Inferline Server

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy Inferline Server
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH access to the server
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/inferline-server.key
          chmod 600 ~/.ssh/inferline-server.key
          cat >>~/.ssh/config <<END
          Host inferline-server
            HostName ${{ secrets.SSH_SERVER_HOSTNAME }}
            User ${{ secrets.SSH_USER }}
            Port ${{ secrets.SSH_PORT }}
            IdentityFile ~/.ssh/inferline-server.key
            StrictHostKeyChecking no
          END

      - name: Create Docker context for inferline-server
        run: docker context create inferline-server --docker "host=ssh://inferline-server"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.CLOUDRIFT_DOCKERHUB_USER }}
          password: ${{ secrets.CLOUDRIFT_DOCKERHUB_PAT }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v6
        id: backend-builder
        with:
          context: .
          file: docker/inferline.Dockerfile
          push: true
          tags: cloudriftai/inferline-server:latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v6
        id: frontend-builder
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: true
          tags: cloudriftai/inferline-frontend:latest

      - name: Copy configuration files to server
        run: |
          scp docker/docker-compose-inferline.yml inferline-server:~/docker-compose.yml
          scp -r nginx inferline-server:~/nginx

      - name: Install Docker and Docker Compose on server
        run: |
          ssh inferline-server << 'EOF'
            # Update package index
            sudo apt-get update
            
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose standalone if not available
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Deploy with docker-compose
        run: |
          ssh inferline-server << 'EOF'
            # Force stop and remove all containers
            docker-compose down --timeout 30 || true
            docker stop $(docker ps -aq) 2>/dev/null || true
            docker rm $(docker ps -aq) 2>/dev/null || true
            
            # Pull latest images
            docker-compose pull
            
            # Start services
            docker-compose up -d
          EOF
